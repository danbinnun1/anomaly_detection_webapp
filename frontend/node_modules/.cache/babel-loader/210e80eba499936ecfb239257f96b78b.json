{"ast":null,"code":"var _jsxFileName = \"/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/Table.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Table(props) {\n  const getKeys = () => {\n    if (props.data === undefined || props.data.length === 0) {\n      return [];\n    }\n\n    return props.data[0];\n  };\n\n  const getHeader = () => {\n    var keys = getKeys(props);\n    return keys.map((key, index) => {\n      return /*#__PURE__*/_jsxDEV(\"th\", {\n        children: key.toUpperCase()\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 20\n      }, this);\n    });\n  };\n\n  const getColor = (row, col) => {\n    if (props.anomalies === undefined) {\n      return 'white';\n    }\n\n    let key = getKeys()[col];\n\n    for (let span of props.anomalies[key]) {\n      if (row >= span.start && row <= span.end) {\n        return 'red';\n      }\n    }\n\n    return 'green';\n  };\n\n  const RenderRow = (row, rowIndex) => {\n    return row.map((key, index) => {\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        style: {\n          backgroundColor: getColor(rowIndex, index)\n        },\n        children: key\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 20\n      }, this);\n    });\n  };\n\n  const getRowsData = () => {\n    return props.data.slice(1).map((row, index) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: RenderRow(row, index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 20\n      }, this);\n    });\n  };\n\n  const table = {\n    borderRadius: \"30px\",\n    fontSize: \"20px\",\n    fontWeight: \"normal\",\n    border: \"none\",\n    borderCollapse: \"collapse\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    whiteSpace: \"nowrap\",\n    backgroundColor: \"white\",\n    borderSpacing: \"10px\",\n    textAlign: \"center\",\n    columnWidth: \"100px\"\n  };\n  const thead = {\n    color: \"#ffffff\",\n    background: \"#000000\"\n  };\n  const tbody = {\n    color: \"#000000\",\n    background: \"ffffff\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      style: table,\n      cellpadding: \"10\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        style: thead,\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: getHeader()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        style: tbody,\n        children: getRowsData()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/Table.js"],"names":["React","Table","props","getKeys","data","undefined","length","getHeader","keys","map","key","index","toUpperCase","getColor","row","col","anomalies","span","start","end","RenderRow","rowIndex","backgroundColor","getRowsData","slice","table","borderRadius","fontSize","fontWeight","border","borderCollapse","width","maxWidth","whiteSpace","borderSpacing","textAlign","columnWidth","thead","color","background","tbody"],"mappings":"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","sourcesContent":["import React from 'react'\n\nexport default function Table(props) {\n    const getKeys = () => {\n        if (props.data === undefined || props.data.length === 0) {\n            return [];\n        }\n        \n        return props.data[0];\n    }\n\n    const getHeader = () => {\n        var keys = getKeys(props);\n        return keys.map((key, index) => {\n            return <th key={key}>{key.toUpperCase()}</th>\n        })\n    }\n\n    const getColor=(row,col)=>{\n        if (props.anomalies===undefined){\n            return 'white';\n        }\n        let key=getKeys()[col];\n        for (let span of props.anomalies[key]){\n            if (row>=span.start&&row<=span.end){\n                return 'red';\n            }\n        }\n        return 'green';\n    }\n\n    const RenderRow = (row, rowIndex) => {\n        return row.map((key, index) => {\n            return <td style={{backgroundColor: getColor(rowIndex,index)}} >{key}</td>\n        })\n    }\n\n    const getRowsData = () => {\n        return props.data.slice(1).map((row, index) => {\n            return <tr key={index}>\n                {RenderRow(row,index)}\n            </tr>\n        })\n    }\n\n    const table = {\n        borderRadius: \"30px\",\n        fontSize: \"20px\",\n        fontWeight: \"normal\",\n        border: \"none\",\n        borderCollapse: \"collapse\",\n        width: \"100%\",\n        maxWidth: \"100%\",\n        whiteSpace: \"nowrap\",\n        backgroundColor: \"white\",\n        borderSpacing: \"10px\",\n        textAlign: \"center\",\n        columnWidth: \"100px\"\n    };\n    const thead = {\n        color: \"#ffffff\",\n        background: \"#000000\",\n    };\n    const tbody = {\n        color: \"#000000\",\n        background: \"ffffff\",\n    };\n\n    return (\n        <div>\n            <table style = {table} cellpadding=\"10\">\n                <thead style = {thead}>\n                    <tr>{getHeader()}</tr>\n                </thead>\n                <tbody style = {tbody}>\n                    {getRowsData()}\n                </tbody>\n            </table>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}