{"ast":null,"code":"var _jsxFileName = \"/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { convertCSVToJSON, convertJSONToLines } from './utils';\nimport Graphs from './Graphs';\nimport Table from './Table';\nimport Models from './Models';\nimport FileUploadPanel from './FileUploadPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [currentModelId, setCurrentModelId] = useState(0);\n  const [currentDataJSON, setCurrentDataJSON] = useState();\n  const [currentDataAnomalies, setCurrentDataAnomalies] = useState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        width: '20%',\n        overflowY: 'scroll',\n        top: '5%',\n        bottom: '20%',\n        left: '83%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Models, {\n        onModelSelect: modelId => {\n          setCurrentModelId(modelId);\n\n          if (currentDataAnomalies !== undefined) {\n            console.log(currentModelId);\n            fetch('/api/anomaly?model_id=' + currentModelId, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(currentDataJSON)\n            }).then(response => response.json()).then(anomalies => setCurrentDataAnomalies(anomalies.anomalies));\n          }\n        },\n        dependency: [currentDataJSON]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        width: '62%',\n        top: '5%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Graphs, {\n        data: currentDataJSON,\n        anomalies: currentDataAnomalies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        width: '80%',\n        height: '30%',\n        overflowY: 'scroll',\n        bottom: '0%',\n        right: '18%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        data: convertJSONToLines(currentDataJSON),\n        anomalies: currentDataAnomalies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        bottom: '5%',\n        right: '5%'\n      },\n      children: /*#__PURE__*/_jsxDEV(FileUploadPanel, {\n        onUploadTrain: async (file, algorithm) => {\n          const json = await convertCSVToJSON(file);\n          fetch('/api/model/' + algorithm, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(json)\n          });\n          setCurrentDataJSON(json);\n          setCurrentDataAnomalies(undefined);\n        },\n        onUploadAnomaly: async file => {\n          const json = await convertCSVToJSON(file);\n          const response = await fetch('/api/anomaly?model_id=' + currentModelId, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(json)\n          });\n          const anomalies = await response.json();\n          setCurrentDataAnomalies(anomalies.anomalies);\n          setCurrentDataJSON(json);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8cM7ZS2Nk7rDoDXFSCHjF2FNPGU=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/App.js"],"names":["useState","convertCSVToJSON","convertJSONToLines","Graphs","Table","Models","FileUploadPanel","App","currentModelId","setCurrentModelId","currentDataJSON","setCurrentDataJSON","currentDataAnomalies","setCurrentDataAnomalies","position","width","overflowY","top","bottom","left","modelId","undefined","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","anomalies","height","right","file","algorithm"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { convertCSVToJSON, convertJSONToLines } from './utils';\nimport Graphs from './Graphs';\nimport Table from './Table';\nimport Models from './Models';\nimport FileUploadPanel from './FileUploadPanel';\n\nexport default function App() {\n\n  const [currentModelId, setCurrentModelId] = useState(0);\n  const [currentDataJSON, setCurrentDataJSON] = useState();\n  const [currentDataAnomalies, setCurrentDataAnomalies] = useState();\n\n  return (\n    <div>\n      <div style={{ position: 'fixed', width: '20%', overflowY: 'scroll', top: '5%', bottom: '20%', left: '83%' }}>\n          <Models onModelSelect={modelId => {\n            setCurrentModelId(modelId);\n\n            if (currentDataAnomalies !== undefined) {\n              console.log(currentModelId);\n              fetch('/api/anomaly?model_id=' + currentModelId, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(currentDataJSON)\n              })\n              .then(response => response.json())\n              .then(anomalies => setCurrentDataAnomalies(anomalies.anomalies));\n            }\n          }} \n          dependency={[currentDataJSON]} />\n      </div>\n\n      <div style={{ position: 'fixed', width: '62%', top: '5%' }}>\n        <Graphs data={currentDataJSON} anomalies={currentDataAnomalies} />\n      </div>\n\n      <div style={{ position: 'fixed', width: '80%', height: '30%', overflowY: 'scroll', bottom: '0%', right: '18%' }}>\n        <Table data={convertJSONToLines(currentDataJSON)} anomalies={currentDataAnomalies} />\n      </div>\n\n      <div style={{ position: 'fixed', bottom: '5%', right: '5%' }} >\n        <FileUploadPanel\n          onUploadTrain={async (file, algorithm) => {\n            const json = await convertCSVToJSON(file);\n            fetch('/api/model/' + algorithm, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(json)\n            });\n\n            setCurrentDataJSON(json);\n            setCurrentDataAnomalies(undefined);\n          }}\n          onUploadAnomaly={async file => {\n            const json = await convertCSVToJSON(file);\n            const response = await fetch('/api/anomaly?model_id=' + currentModelId, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(json)\n            });\n            const anomalies = await response.json();\n\n            setCurrentDataAnomalies(anomalies.anomalies);\n            setCurrentDataJSON(json);\n          }}\n        />\n      </div>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}