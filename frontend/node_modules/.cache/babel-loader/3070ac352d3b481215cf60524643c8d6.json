{"ast":null,"code":"export function convertCSVToJSON(file) {\n  return new Promise(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n\n      if (lastLine === '') {\n        lines.pop();\n      }\n\n      let result = {};\n      let headers = lines[0].split(\",\");\n\n      for (let i = 0; i < headers.length; ++i) {\n        result[headers[i]] = [];\n      }\n\n      for (let i = 1; i < lines.length; ++i) {\n        let currentline = lines[i].split(\",\");\n\n        for (let j = 0; j < headers.length; ++j) {\n          result[headers[j]].push(currentline[j]);\n        }\n      }\n\n      resolve(JSON.stringify(result));\n    };\n\n    reader.readAsText(file);\n  });\n}\nexport function convertJSONToLines(json) {\n  lines = [];\n  keys = [];\n\n  for (var key in json) {\n    keys.push(key);\n  }\n\n  lines.push(keys);\n\n  for (var i = 0; i < Object.values(json)[0].length; ++i) {\n    lines.push([]);\n  }\n\n  for (var key in json) {\n    const values = json[key];\n\n    for (var i = 0; i < json[key].length; ++i) {\n      lines[i].push();\n    }\n  }\n}\nexport function splitCSV(file) {\n  return new Promise(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n\n      if (lastLine === '') {\n        lines.pop();\n      }\n\n      let result = [];\n\n      for (let i = 0; i < lines.length; ++i) {\n        result.push(lines[i].split(\",\"));\n      }\n\n      resolve(result);\n    };\n\n    reader.readAsText(file);\n  });\n}","map":{"version":3,"sources":["/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/utils.js"],"names":["convertCSVToJSON","file","Promise","resolve","reader","FileReader","onload","lines","result","split","lastLine","length","pop","headers","i","currentline","j","push","JSON","stringify","readAsText","convertJSONToLines","json","keys","key","Object","values","splitCSV"],"mappings":"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","sourcesContent":["export function convertCSVToJSON(file) {\n  return new Promise((resolve) => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n      if (lastLine === '') {\n        lines.pop();\n      }\n      let result = {};\n\n      let headers = lines[0].split(\",\");\n      for (let i = 0; i < headers.length; ++i) {\n        result[headers[i]] = [];\n      }\n\n      for (let i = 1; i < lines.length; ++i) {\n        let currentline = lines[i].split(\",\");\n\n        for (let j = 0; j < headers.length; ++j) {\n          result[headers[j]].push(currentline[j]);\n        }\n      }\n\n      resolve(JSON.stringify(result));\n    }\n\n    reader.readAsText(file);\n  });\n}\n\nexport function convertJSONToLines(json) {\n  lines = [];\n\n  keys = [];\n  for (var key in json) {\n    keys.push(key);\n  }\n  lines.push(keys);\n\n  for (var i = 0; i < Object.values(json)[0].length; ++i) {\n    lines.push([]);\n  }\n\n  for (var key in json) {\n    const values = json[key];\n    \n    for (var i = 0; i < json[key].length; ++i) {\n      lines[i].push()\n    }\n  }\n}\n\nexport function splitCSV(file) {\n  return new Promise((resolve) => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n\n      if (lastLine === '') {\n        lines.pop();\n      }\n\n      let result = [];\n      for (let i = 0; i < lines.length; ++i) {\n        result.push(lines[i].split(\",\"));\n      }\n\n      resolve(result);\n    }\n    \n    reader.readAsText(file);\n  });\n}"]},"metadata":{},"sourceType":"module"}