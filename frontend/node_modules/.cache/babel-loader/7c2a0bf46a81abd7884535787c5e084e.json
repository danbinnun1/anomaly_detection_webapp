{"ast":null,"code":"var _jsxFileName = \"/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { convertJSONToLines } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Table(props) {\n  _s();\n\n  const [result, setResult] = useState();\n\n  const getKeys = data => {\n    if (data === undefined || data.length === 0) {\n      return [];\n    }\n\n    return data[0];\n  };\n\n  const table = {\n    borderRadius: \"30px\",\n    fontSize: \"20px\",\n    fontWeight: \"normal\",\n    border: \"none\",\n    borderCollapse: \"collapse\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    whiteSpace: \"nowrap\",\n    backgroundColor: \"white\",\n    borderSpacing: \"10px\",\n    textAlign: \"center\",\n    columnWidth: \"100px\"\n  };\n  const thead = {\n    color: \"#ffffff\",\n    background: \"#000000\"\n  };\n  const tbody = {\n    color: \"#000000\",\n    background: \"ffffff\"\n  };\n\n  const getHeader = data => {\n    var keys = getKeys(data);\n    return keys.map((key, index) => {\n      return /*#__PURE__*/_jsxDEV(\"th\", {\n        children: key.toUpperCase()\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 20\n      }, this);\n    });\n  };\n\n  const getColor = (row, col, data) => {\n    if (props.anomalies === undefined) {\n      return 'white';\n    }\n\n    let key = getKeys(data)[col];\n\n    for (let span of props.anomalies[key]) {\n      if (row >= span.start && row <= span.end) {\n        return 'red';\n      }\n    }\n\n    return 'green';\n  };\n\n  const RenderRow = (row, rowIndex, data) => {\n    return row.map((key, index) => {\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        style: {\n          backgroundColor: getColor(rowIndex, index, data)\n        },\n        children: key\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 20\n      }, this);\n    });\n  };\n\n  const getRowsData = data => {\n    return data.slice(1).map((row, index) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: RenderRow(row, index, data)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 20\n      }, this);\n    });\n  };\n\n  if (props.data === undefined) {\n    return null;\n  }\n\n  if (!result || result.length == 0) {\n    setTimeout(() => {\n      const data = convertJSONToLines(props.data);\n      setResult( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          style: table,\n          cellpadding: \"10\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            style: thead,\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: getHeader(data)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            style: tbody,\n            children: getRowsData(data)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }, this));\n    }, 1);\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 16\n    }, this);\n  }\n\n  return result;\n}\n\n_s(Table, \"8r1jQtZFTJuxYIwM7JhUsDhJ3hU=\");\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/Table.js"],"names":["React","useState","convertJSONToLines","Table","props","result","setResult","getKeys","data","undefined","length","table","borderRadius","fontSize","fontWeight","border","borderCollapse","width","maxWidth","whiteSpace","backgroundColor","borderSpacing","textAlign","columnWidth","thead","color","background","tbody","getHeader","keys","map","key","index","toUpperCase","getColor","row","col","anomalies","span","start","end","RenderRow","rowIndex","getRowsData","slice","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { convertJSONToLines } from './utils';\n\n\nexport default function Table(props) {\n    const [result,setResult]=useState();\n    const getKeys = (data) => {\n        if (data === undefined || data.length === 0) {\n            return [];\n        }\n        \n        return data[0];\n    }\n\n    const table = {\n        borderRadius: \"30px\",\n        fontSize: \"20px\",\n        fontWeight: \"normal\",\n        border: \"none\",\n        borderCollapse: \"collapse\",\n        width: \"100%\",\n        maxWidth: \"100%\",\n        whiteSpace: \"nowrap\",\n        backgroundColor: \"white\",\n        borderSpacing: \"10px\",\n        textAlign: \"center\",\n        columnWidth: \"100px\"\n    };\n\n    const thead = {\n        color: \"#ffffff\",\n        background: \"#000000\",\n    };\n    const tbody = {\n        color: \"#000000\",\n        background: \"ffffff\",\n    };\n\n    const getHeader = (data) => {\n        var keys = getKeys(data);\n        return keys.map((key, index) => {\n            return <th key={key}>{key.toUpperCase()}</th>\n        })\n    }\n\n    const getColor=(row,col,data)=>{\n        if (props.anomalies===undefined){\n            return 'white';\n        }\n        let key=getKeys(data)[col];\n        for (let span of props.anomalies[key]){\n            if (row>=span.start&&row<=span.end){\n                return 'red';\n            }\n        }\n        return 'green';\n    }\n\n    const RenderRow = (row, rowIndex,data) => {\n        return row.map((key, index) => {\n            return <td style={{backgroundColor: getColor(rowIndex,index,data)}} >{key}</td>\n        })\n    }\n\n    const getRowsData = (data) => {\n        return data.slice(1).map((row, index) => {\n            return <tr key={index}>\n                {RenderRow(row,index,data)}\n            </tr>\n        })\n    }\n    if (props.data===undefined){\n        return null;\n    }\n    if (!result||result.length==0){\n        setTimeout(() => {\n            const data=convertJSONToLines(props.data);\n            setResult(<div>\n                <table style = {table} cellpadding=\"10\">\n                    <thead style = {thead}>\n                        <tr>{getHeader(data)}</tr>\n                    </thead>\n                    <tbody style = {tbody}>\n                        {getRowsData(data)}\n                    </tbody>\n                </table>\n            </div>);\n        }, 1);\n        return <h1>loading...</h1>\n\n    }\n    \n\n    \n    \n\n    return (\n        result\n    );\n}"]},"metadata":{},"sourceType":"module"}