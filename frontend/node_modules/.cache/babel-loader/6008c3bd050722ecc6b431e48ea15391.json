{"ast":null,"code":"export function convertCSVToJSON(file){return new Promise(function(resolve){var reader=new FileReader();reader.onload=function(){var lines=reader.result.split(\"\\n\");var lastLine=lines[lines.length-1];if(lastLine===''){lines.pop();}var result={};var headers=lines[0].split(\",\");for(var i=0;i<headers.length;++i){result[headers[i]]=[];}for(var _i=1;_i<lines.length;++_i){var currentline=lines[_i].split(\",\");for(var j=0;j<headers.length;++j){result[headers[j]].push(currentline[j]);}}resolve(result);};reader.readAsText(file);});}export function convertJSONToLines(json){if(json===undefined||json.length===0){return[];}var lines=[];lines.push(Object.keys(json));for(var i=1;i<=Object.values(json)[0].length;++i){lines[i]=[];}lines[0].forEach(function(key){var values=json[key];for(var j=1;j<=values.length;++j){lines[j].push(values[j]);}});return lines;}","map":{"version":3,"sources":["/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/utils.js"],"names":["convertCSVToJSON","file","Promise","resolve","reader","FileReader","onload","lines","result","split","lastLine","length","pop","headers","i","currentline","j","push","readAsText","convertJSONToLines","json","undefined","Object","keys","values","forEach","key"],"mappings":"AAAA,MAAO,SAASA,CAAAA,gBAAT,CAA0BC,IAA1B,CAAgC,CACrC,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa,CAC9B,GAAIC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,UAAJ,EAAb,CAEAD,MAAM,CAACE,MAAP,CAAgB,UAAM,CACpB,GAAIC,CAAAA,KAAK,CAAGH,MAAM,CAACI,MAAP,CAAcC,KAAd,CAAoB,IAApB,CAAZ,CACA,GAAIC,CAAAA,QAAQ,CAAGH,KAAK,CAACA,KAAK,CAACI,MAAN,CAAe,CAAhB,CAApB,CACA,GAAID,QAAQ,GAAK,EAAjB,CAAqB,CACnBH,KAAK,CAACK,GAAN,GACD,CACD,GAAIJ,CAAAA,MAAM,CAAG,EAAb,CAEA,GAAIK,CAAAA,OAAO,CAAGN,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,CAAe,GAAf,CAAd,CACA,IAAK,GAAIK,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,OAAO,CAACF,MAA5B,CAAoC,EAAEG,CAAtC,CAAyC,CACvCN,MAAM,CAACK,OAAO,CAACC,CAAD,CAAR,CAAN,CAAqB,EAArB,CACD,CAED,IAAK,GAAIA,CAAAA,EAAC,CAAG,CAAb,CAAgBA,EAAC,CAAGP,KAAK,CAACI,MAA1B,CAAkC,EAAEG,EAApC,CAAuC,CACrC,GAAIC,CAAAA,WAAW,CAAGR,KAAK,CAACO,EAAD,CAAL,CAASL,KAAT,CAAe,GAAf,CAAlB,CAEA,IAAK,GAAIO,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,OAAO,CAACF,MAA5B,CAAoC,EAAEK,CAAtC,CAAyC,CACvCR,MAAM,CAACK,OAAO,CAACG,CAAD,CAAR,CAAN,CAAmBC,IAAnB,CAAwBF,WAAW,CAACC,CAAD,CAAnC,EACD,CACF,CAEDb,OAAO,CAACK,MAAD,CAAP,CACD,CAtBD,CAwBAJ,MAAM,CAACc,UAAP,CAAkBjB,IAAlB,EACD,CA5BM,CAAP,CA6BD,CAED,MAAO,SAASkB,CAAAA,kBAAT,CAA4BC,IAA5B,CAAkC,CACvC,GAAIA,IAAI,GAAKC,SAAT,EAAsBD,IAAI,CAACT,MAAL,GAAgB,CAA1C,CAA6C,CAC3C,MAAO,EAAP,CACD,CAED,GAAIJ,CAAAA,KAAK,CAAG,EAAZ,CAEAA,KAAK,CAACU,IAAN,CAAWK,MAAM,CAACC,IAAP,CAAYH,IAAZ,CAAX,EAEA,IAAK,GAAIN,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,EAAIQ,MAAM,CAACE,MAAP,CAAcJ,IAAd,EAAoB,CAApB,EAAuBT,MAA5C,CAAoD,EAAEG,CAAtD,CAAyD,CACvDP,KAAK,CAACO,CAAD,CAAL,CAAW,EAAX,CACD,CAEDP,KAAK,CAAC,CAAD,CAAL,CAASkB,OAAT,CAAiB,SAAAC,GAAG,CAAI,CACtB,GAAMF,CAAAA,MAAM,CAAGJ,IAAI,CAACM,GAAD,CAAnB,CAEA,IAAK,GAAIV,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,EAAIQ,MAAM,CAACb,MAA5B,CAAoC,EAAEK,CAAtC,CAAyC,CACvCT,KAAK,CAACS,CAAD,CAAL,CAASC,IAAT,CAAcO,MAAM,CAACR,CAAD,CAApB,EACD,CACF,CAND,EAQA,MAAOT,CAAAA,KAAP,CACD","sourcesContent":["export function convertCSVToJSON(file) {\n  return new Promise((resolve) => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n      if (lastLine === '') {\n        lines.pop();\n      }\n      let result = {};\n\n      let headers = lines[0].split(\",\");\n      for (let i = 0; i < headers.length; ++i) {\n        result[headers[i]] = [];\n      }\n\n      for (let i = 1; i < lines.length; ++i) {\n        let currentline = lines[i].split(\",\");\n\n        for (let j = 0; j < headers.length; ++j) {\n          result[headers[j]].push(currentline[j]);\n        }\n      }\n\n      resolve(result);\n    }\n\n    reader.readAsText(file);\n  });\n}\n\nexport function convertJSONToLines(json) {\n  if (json === undefined || json.length === 0) {\n    return [];\n  }\n  \n  let lines = [];\n\n  lines.push(Object.keys(json));\n\n  for (let i = 1; i <= Object.values(json)[0].length; ++i) {\n    lines[i] = [];\n  }\n\n  lines[0].forEach(key => {\n    const values = json[key];\n\n    for (let j = 1; j <= values.length; ++j) {\n      lines[j].push(values[j]);\n    }\n  });\n\n  return lines;\n}"]},"metadata":{},"sourceType":"module"}