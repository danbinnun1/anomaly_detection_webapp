{"ast":null,"code":"var _jsxFileName = \"/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/Models.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { FixedSizeList } from 'react-window';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Models(props) {\n  _s();\n\n  const [modelsList, setModelsList] = useState([]);\n  const [currentModel, setCurrentModel] = useState();\n  useEffect(() => fetch('/api/models').then(respone => respone.json()).then(json => setModelsList(json)));\n\n  const getBackgroundColor = status => status === 'ready' ? 'green' : 'red';\n\n  const getBorderColor = modelId => modelId === currentModel ? 'black' : 'white';\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FixedSizeList, {\n      height: 400,\n      width: 300,\n      itemSize: 46,\n      itemCount: modelsList.length,\n      children: itemProps => {\n        const {\n          index,\n          style\n        } = itemProps;\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          button: true,\n          style: style,\n          onClick: () => setCurrentProperty(Object.keys(props.data)[index]),\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: Object.keys(props.data)[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 25\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), modelsList.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n      style: {\n        listStyleType: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: getBackgroundColor(item.status),\n          padding: 20,\n          width: 250,\n          height: 50,\n          border: 20,\n          borderRadius: 25,\n          borderColor: getBorderColor(item.modelId),\n          borderStyle: 'solid'\n        },\n        onClick: () => {\n          if (item.status === 'ready') {\n            props.onModelSelect();\n            setCurrentModel(item.modelId);\n          }\n        },\n        children: [item.uploadTime, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), item.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Models, \"urV5NAG8nIi3u1zx0NUDDFq1qMA=\");\n\n_c = Models;\n\nvar _c;\n\n$RefreshReg$(_c, \"Models\");","map":{"version":3,"sources":["/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/Models.js"],"names":["useState","useEffect","ListItem","ListItemText","FixedSizeList","Models","props","modelsList","setModelsList","currentModel","setCurrentModel","fetch","then","respone","json","getBackgroundColor","status","getBorderColor","modelId","length","itemProps","index","style","setCurrentProperty","Object","keys","data","map","item","listStyleType","backgroundColor","padding","width","height","border","borderRadius","borderColor","borderStyle","onModelSelect","uploadTime"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { FixedSizeList } from 'react-window';\n\nexport default function Models(props) {\n\n    const [modelsList, setModelsList] = useState([]);\n    const [currentModel, setCurrentModel] = useState();\n\n    useEffect(() => fetch('/api/models')\n        .then(respone => respone.json())\n        .then(json => setModelsList(json)));\n    \n    const getBackgroundColor = status => (status === 'ready' ? 'green' : 'red');\n    const getBorderColor = modelId => (modelId === currentModel ? 'black' : 'white');\n\n    return (\n        <div>\n        <FixedSizeList height={400} width={300} itemSize={46} itemCount={modelsList.length}>\n            {itemProps => {\n                const { index, style } = itemProps;\n            \n                return (\n                    <ListItem button style={style} key={index} onClick={() => setCurrentProperty(Object.keys(props.data)[index])}>\n                        <ListItemText primary={Object.keys(props.data)[index]} />\n                    </ListItem>\n                );\n            }}\n        </FixedSizeList>\n        \n        {modelsList.map(item => (\n            <li style={{listStyleType: 'none'}}>\n                <div\n                style={{\n                    backgroundColor: getBackgroundColor(item.status),\n                    padding: 20,\n                    width: 250,\n                    height: 50,\n                    border: 20, \n                    borderRadius: 25,\n                    borderColor: getBorderColor(item.modelId),\n                    borderStyle: 'solid'\n                }}\n                onClick={() => {\n                    if (item.status === 'ready') {\n                        props.onModelSelect();\n                        setCurrentModel(item.modelId);\n                    }\n                }}>\n                    {item.uploadTime}\n                        <br />\n                    {item.status}\n                </div>\n                <br />\n            </li>\n        ))}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}