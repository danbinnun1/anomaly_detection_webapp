{"ast":null,"code":"function convertCSVToJSON(file) {\n  return new Promise(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      var lines = reader.result.split(\"\\n\");\n      var result = [];\n      var headers = lines[0].split(\",\");\n\n      for (var i = 1; i < lines.length; ++i) {\n        var obj = {};\n        var currentline = lines[i].split(\",\");\n\n        for (var j = 0; j < headers.length; ++j) {\n          obj[headers[j]] = currentline[j];\n        }\n\n        result.push(obj);\n      }\n\n      reslove(JSON.stringify(result));\n    };\n\n    reader.readAsText(file);\n  });\n}\n\nexport default convertCSVToJSON;","map":{"version":3,"sources":["/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/utils.js"],"names":["convertCSVToJSON","file","Promise","resolve","reader","FileReader","onload","lines","result","split","headers","i","length","obj","currentline","j","push","reslove","JSON","stringify","readAsText"],"mappings":"AAAA,SAASA,gBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,SAAO,IAAIC,OAAJ,CAAcC,OAAD,IAAa;AAC/B,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AAEAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM;AACpB,UAAIC,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAcC,KAAd,CAAoB,IAApB,CAAZ;AACA,UAAID,MAAM,GAAG,EAAb;AAEA,UAAIE,OAAO,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,CAAe,GAAf,CAAd;;AAEA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkC,EAAED,CAApC,EAAsC;AAEpC,YAAIE,GAAG,GAAG,EAAV;AACA,YAAIC,WAAW,GAAGP,KAAK,CAACI,CAAD,CAAL,CAASF,KAAT,CAAe,GAAf,CAAlB;;AAEA,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACE,MAA5B,EAAoC,EAAEG,CAAtC,EAAyC;AACvCF,UAAAA,GAAG,CAACH,OAAO,CAACK,CAAD,CAAR,CAAH,GAAkBD,WAAW,CAACC,CAAD,CAA7B;AACD;;AAEDP,QAAAA,MAAM,CAACQ,IAAP,CAAYH,GAAZ;AACD;;AAEDI,MAAAA,OAAO,CAACC,IAAI,CAACC,SAAL,CAAeX,MAAf,CAAD,CAAP;AACD,KAnBD;;AAqBAJ,IAAAA,MAAM,CAACgB,UAAP,CAAkBnB,IAAlB;AACD,GAzBM,CAAP;AA0BD;;AAED,eAAeD,gBAAf","sourcesContent":["function convertCSVToJSON (file) {\n  return new Promise ((resolve) => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      var lines = reader.result.split(\"\\n\");\n      var result = [];\n    \n      var headers = lines[0].split(\",\");\n    \n      for (var i = 1; i < lines.length; ++i){\n    \n        var obj = {};\n        var currentline = lines[i].split(\",\");\n    \n        for (var j = 0; j < headers.length; ++j) {\n          obj[headers[j]] = currentline[j];\n        }\n    \n        result.push(obj);\n      }\n\n      reslove(JSON.stringify(result));\n    }\n\n    reader.readAsText(file);\n  });\n}\n\nexport default convertCSVToJSON"]},"metadata":{},"sourceType":"module"}