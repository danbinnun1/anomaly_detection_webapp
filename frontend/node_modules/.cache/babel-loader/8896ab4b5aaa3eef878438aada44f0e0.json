{"ast":null,"code":"export default function convertCSVToJSON(file) {\n  return new Promise(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n\n      if (lastLine == '') {\n        lines.pop();\n      }\n\n      let result = {};\n      let headers = lines[0].split(\",\");\n\n      for (let i = 0; i < headers.length; ++i) {\n        result[headers[i]] = [];\n      }\n\n      for (let i = 1; i < lines.length; ++i) {\n        let currentline = lines[i].split(\",\");\n\n        for (let j = 0; j < headers.length; ++j) {\n          result[headers[j]].push(currentline[j]);\n        }\n      }\n\n      console.log(JSON.stringify(result));\n      resolve(JSON.stringify(result));\n    };\n\n    reader.readAsText(file);\n  });\n}\nexport function splitCSV(file) {\n  return new Promise(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n\n      if (lastLine == '') {\n        lines.pop();\n      }\n\n      let result = [];\n\n      for (let i = 0; i < lines.length; ++i) {\n        result.push(lines[i].split(\",\"));\n      }\n\n      resolve(result);\n    };\n\n    reader.readAsText(file);\n  });\n}","map":{"version":3,"sources":["/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/utils.js"],"names":["convertCSVToJSON","file","Promise","resolve","reader","FileReader","onload","lines","result","split","lastLine","length","pop","headers","i","currentline","j","push","console","log","JSON","stringify","readAsText","splitCSV"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AAC7C,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AAEAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM;AACpB,UAAIC,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAcC,KAAd,CAAoB,IAApB,CAAZ;AACA,UAAIC,QAAQ,GAAGH,KAAK,CAACA,KAAK,CAACI,MAAN,GAAe,CAAhB,CAApB;;AACA,UAAID,QAAQ,IAAI,EAAhB,EAAoB;AAClBH,QAAAA,KAAK,CAACK,GAAN;AACD;;AACD,UAAIJ,MAAM,GAAG,EAAb;AAEA,UAAIK,OAAO,GAAGN,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,CAAe,GAAf,CAAd;;AACA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACF,MAA5B,EAAoC,EAAEG,CAAtC,EAAyC;AACvCN,QAAAA,MAAM,CAACK,OAAO,CAACC,CAAD,CAAR,CAAN,GAAqB,EAArB;AACD;;AAED,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACI,MAA1B,EAAkC,EAAEG,CAApC,EAAuC;AACrC,YAAIC,WAAW,GAAGR,KAAK,CAACO,CAAD,CAAL,CAASL,KAAT,CAAe,GAAf,CAAlB;;AAEA,aAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACF,MAA5B,EAAoC,EAAEK,CAAtC,EAAyC;AACvCR,UAAAA,MAAM,CAACK,OAAO,CAACG,CAAD,CAAR,CAAN,CAAmBC,IAAnB,CAAwBF,WAAW,CAACC,CAAD,CAAnC;AACD;AACF;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeb,MAAf,CAAZ;AACAL,MAAAA,OAAO,CAACiB,IAAI,CAACC,SAAL,CAAeb,MAAf,CAAD,CAAP;AACD,KAtBD;;AAwBAJ,IAAAA,MAAM,CAACkB,UAAP,CAAkBrB,IAAlB;AACD,GA5BM,CAAP;AA6BD;AAED,OAAO,SAASsB,QAAT,CAAkBtB,IAAlB,EAAwB;AAC7B,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AAEAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM;AACpB,UAAIC,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAcC,KAAd,CAAoB,IAApB,CAAZ;AACA,UAAIC,QAAQ,GAAGH,KAAK,CAACA,KAAK,CAACI,MAAN,GAAe,CAAhB,CAApB;;AAEA,UAAID,QAAQ,IAAI,EAAhB,EAAoB;AAClBH,QAAAA,KAAK,CAACK,GAAN;AACD;;AAED,UAAIJ,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACI,MAA1B,EAAkC,EAAEG,CAApC,EAAuC;AACrCN,QAAAA,MAAM,CAACS,IAAP,CAAYV,KAAK,CAACO,CAAD,CAAL,CAASL,KAAT,CAAe,GAAf,CAAZ;AACD;;AACDN,MAAAA,OAAO,CAACK,MAAD,CAAP;AACD,KAbD;;AAcAJ,IAAAA,MAAM,CAACkB,UAAP,CAAkBrB,IAAlB;AACD,GAlBM,CAAP;AAmBD","sourcesContent":["export default function convertCSVToJSON(file) {\n  return new Promise((resolve) => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n      if (lastLine == '') {\n        lines.pop();\n      }\n      let result = {};\n\n      let headers = lines[0].split(\",\");\n      for (let i = 0; i < headers.length; ++i) {\n        result[headers[i]] = [];\n      }\n\n      for (let i = 1; i < lines.length; ++i) {\n        let currentline = lines[i].split(\",\");\n\n        for (let j = 0; j < headers.length; ++j) {\n          result[headers[j]].push(currentline[j]);\n        }\n      }\n      console.log(JSON.stringify(result))\n      resolve(JSON.stringify(result));\n    }\n\n    reader.readAsText(file);\n  });\n}\n\nexport function splitCSV(file) {\n  return new Promise((resolve) => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n\n      if (lastLine == '') {\n        lines.pop();\n      }\n      \n      let result = [];\n      for (let i = 0; i < lines.length; ++i) {\n        result.push(lines[i].split(\",\"));\n      }\n      resolve(result);\n    }\n    reader.readAsText(file);\n  });\n}"]},"metadata":{},"sourceType":"module"}