{"ast":null,"code":"export function convertCSVToJSON(file) {\n  return new Promise(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n\n      if (lastLine === '') {\n        lines.pop();\n      }\n\n      let result = {};\n      let headers = lines[0].split(\",\");\n\n      for (let i = 0; i < headers.length; ++i) {\n        result[headers[i]] = [];\n      }\n\n      for (let i = 1; i < lines.length; ++i) {\n        let currentline = lines[i].split(\",\");\n\n        for (let j = 0; j < headers.length; ++j) {\n          result[headers[j]].push(currentline[j]);\n        }\n      }\n\n      resolve(result);\n    };\n\n    reader.readAsText(file);\n  });\n}\nexport function convertJSONToLines(json) {\n  if (json.length == 0) {\n    return [];\n  }\n\n  let lines = [];\n  lines.push(Object.keys(json));\n\n  for (let i = 0; i < Object.values(json)[0].length; ++i) {\n    lines.push([]);\n  }\n\n  for (const key in Object.keys(json)) {\n    const values = json[key];\n    console.log(key);\n    console.log(values);\n\n    for (let i = 1; i <= values.length; ++i) {\n      lines[i].push(values[i]);\n    }\n  }\n\n  return lines;\n}\nexport function splitCSV(file) {\n  return new Promise(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n\n      if (lastLine === '') {\n        lines.pop();\n      }\n\n      let result = [];\n\n      for (let i = 0; i < lines.length; ++i) {\n        result.push(lines[i].split(\",\"));\n      }\n\n      resolve(result);\n    };\n\n    reader.readAsText(file);\n  });\n}","map":{"version":3,"sources":["/home/yonatan/Projects/anomaly_detection_webapp/frontend/src/utils.js"],"names":["convertCSVToJSON","file","Promise","resolve","reader","FileReader","onload","lines","result","split","lastLine","length","pop","headers","i","currentline","j","push","readAsText","convertJSONToLines","json","Object","keys","values","key","console","log","splitCSV"],"mappings":"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","sourcesContent":["export function convertCSVToJSON(file) {\n  return new Promise((resolve) => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n      if (lastLine === '') {\n        lines.pop();\n      }\n      let result = {};\n\n      let headers = lines[0].split(\",\");\n      for (let i = 0; i < headers.length; ++i) {\n        result[headers[i]] = [];\n      }\n\n      for (let i = 1; i < lines.length; ++i) {\n        let currentline = lines[i].split(\",\");\n\n        for (let j = 0; j < headers.length; ++j) {\n          result[headers[j]].push(currentline[j]);\n        }\n      }\n\n      resolve(result);\n    }\n\n    reader.readAsText(file);\n  });\n}\n\nexport function convertJSONToLines(json) {\n  if (json.length == 0) {\n    return [];\n  }\n  \n  let lines = [];\n\n  lines.push(Object.keys(json));\n\n  for (let i = 0; i < Object.values(json)[0].length; ++i) {\n    lines.push([]);\n  }\n\n  for (const key in Object.keys(json)) {\n    const values = json[key];console.log(key);console.log(values);\n\n    for (let i = 1; i <= values.length; ++i) {\n      lines[i].push(values[i]);\n    }\n  }\n\n  return lines;\n}\n\nexport function splitCSV(file) {\n  return new Promise((resolve) => {\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      let lines = reader.result.split(\"\\n\");\n      let lastLine = lines[lines.length - 1];\n\n      if (lastLine === '') {\n        lines.pop();\n      }\n\n      let result = [];\n      for (let i = 0; i < lines.length; ++i) {\n        result.push(lines[i].split(\",\"));\n      }\n\n      resolve(result);\n    }\n    \n    reader.readAsText(file);\n  });\n}"]},"metadata":{},"sourceType":"module"}